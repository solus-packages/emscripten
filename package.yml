name       : emscripten
version    : 1.39.18
release    : 2
source     :
    - git|https://github.com/llvm/llvm-project : a135c4a2cf7197dd3140f610f51b596d7334bae2
    - https://github.com/emscripten-core/emscripten/archive/1.39.18.tar.gz : aa0df2828096d161636467d4fc062bbeea31e372c122a05c9685bb6cb2d4064e
license    :
    - NCSA
    - MIT
homepage   : https://emscripten.org/
component  : programming
summary    : An LLVM-to-Web Compiler
description: |
    Emscripten is an LLVM-to-JavaScript compiler. It takes LLVM bitcode - which can be generated from C/C++, using clang or any other language that can be converted into LLVM and compiles that into JavaScript.
builddeps  :
    - llvm-devel
    - nodejs
    - python-sphinx
rundeps    :
    - closure-compiler
    - nodejs
    - wabt
clang      : yes
debug      : no
networking : yes
environment: |
    export _LLVM_FLAGS_FINAL="-march=x86-64 -mtune=generic -gline-tables-only -O3 -fstack-protector -pipe -DNDEBUG"
setup      : |
    tar xf $sources/${version}.tar.gz
    mv emscripten-${version} emscripten
    pushd emscripten
    %patch -p1 < $pkgfiles/include-libunwind.patch
    %patch -p1 < $pkgfiles/emscripten-rst-manpage.patch
    sed "s/emcc/em++/g" site/source/docs/tools_reference/emcc.rst > site/source/docs/tools_reference/em++.rst
    cp $pkgfiles/settings_template.py.in tools/settings_template.py
    npm install
    ln -sf /usr/share/java/closure-compiler/closure-compiler-linter.jar node_modules/google-closure-compiler-java/compiler.jar
    popd

    export CFLAGS="$_LLVM_FLAGS_FINAL"
    export CXXFLAGS="$_LLVM_FLAGS_FINAL"

    mkdir llvm/solusBuildDir && cd llvm/solusBuildDir
    cmake -G Ninja .. \
        -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/share/emscripten/llvm \
        -DCMAKE_AR="/usr/bin/llvm-ar" \
        -DCMAKE_STRIP="/usr/bin/llvm-strip" \
        -DCMAKE_RANLIB="/usr/bin/llvm-ranlib" \
        -DCMAKE_NM="/usr/bin/llvm-nm" \
        -DCMAKE_SKIP_RPATH=YES \
        -DCLANG_DEFAULT_LINKER="lld" \
        -DCLANG_DEFAULT_OBJCOPY="llvm-objcopy" \
        -DLLVM_TARGETS_TO_BUILD="host;WebAssembly" \
        -DLLVM_BUILD_RUNTIME=OFF \
        -DLLVM_TOOL_LTO_BUILD=ON \
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_ENABLE_PROJECTS="lld;clang" \
        -DLLVM_ENABLE_PIC=ON \
        -DCLANG_INCLUDE_TESTS=OFF
build      : |
    pushd llvm
    %ninja_build
    popd
    pushd emscripten
    %make man -C site
install    : |
    install -dm00755 $installdir/usr/{bin,share/{emscripten/{emsdk/docs,llvm},man/{man1,man5}}}
    for exec in {clang-11,clang,clang++,clang-cpp,wasm-ld,lld,llc,llvm-nm,llvm-ar,llvm-as,llvm-dis,llvm-dwarfdump,llvm-ranlib}; do
        install -Dm00755 llvm/solusBuildDir/bin/$exec $installdir/usr/share/emscripten/llvm
    done

    cd emscripten

    cp -rup em* cmake src system node_modules third_party tools $installdir/usr/share/emscripten/emsdk
    install -Dm00644 docs/emcc.txt $installdir/usr/share/emscripten/emsdk/docs/emcc.txt
    install -Dm00644 site/build/man/*.1 $installdir/usr/share/man/man1
    install -Dm00644 site/build/man/*.5 $installdir/usr/share/man/man5

    cd $installdir/usr/share/emscripten/emsdk

    rm -rf $installdir/usr/share/emscripten/emsdk/*.bat

    for bin in {em++,em-config,emar,embuilder,emcc,emcmake,emconfigure,emlink,emmake,emranlib,emrun,emscons,emsize}; do
        sed -e 's/@BIN@/'"$bin"'/' $pkgfiles/emcommand.in > $bin
        install -Dm00755 $bin $installdir/usr/bin/$bin
    done
